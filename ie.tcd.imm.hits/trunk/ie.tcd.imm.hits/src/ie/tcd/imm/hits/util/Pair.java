/*
 * All rights reserved. (C) Copyright 2009, Trinity College Dublin
 */
package ie.tcd.imm.hits.util;

import java.io.Serializable;

import javax.annotation.CheckReturnValue;
import javax.annotation.Nonnull;
import javax.annotation.concurrent.Immutable;

import edu.umd.cs.findbugs.annotations.DefaultAnnotation;

/**
 * Holds two (different possibly different type) values.
 * <p>
 * {@link Serializable} if and only if both of the type parameters are
 * {@link Serializable}.
 * 
 * @author <a href="mailto:bakosg@tcd.ie">Gabor Bakos</a>
 * @param <Left>
 *            The type of the first/left value.
 * @param <Right>
 *            The type of the second/right value.
 */
@Immutable
@DefaultAnnotation( { Nonnull.class, CheckReturnValue.class })
public class Pair<Left, Right> implements Serializable {
	private static final long serialVersionUID = 2771814364666313214L;
	private final Left left;
	private final Right right;

	/**
	 * Constructs the {@link Pair}.
	 * 
	 * @param left
	 *            The first/left object.
	 * @param right
	 *            The second, right object.
	 */
	public Pair(final Left left, final Right right) {
		super();
		this.left = left;
		this.right = right;
	}

	/**
	 * @return The first/left object.
	 */
	public Left getLeft() {
		return left;
	}

	/**
	 * @return The second/right object.
	 */
	public Right getRight() {
		return right;
	}

	/**
	 * @return {#code (}first object's {link Object#toString()}{@code , }second
	 *         object's {link Object#toString()}
	 */
	@Override
	public String toString() {
		return "(" + left + ", " + right + ")";
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (left == null ? 0 : left.hashCode());
		result = prime * result + (right == null ? 0 : right.hashCode());
		return result;
	}

	/**
	 * Checks for equality of this and {@code obj}.
	 * 
	 * @param obj
	 *            Preferably other {@link Pair} object.
	 * @return The value of the equality check generated by eclipse.
	 */
	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final Pair<?, ?> other = (Pair<?, ?>) obj;
		if (left == null) {
			if (other.left != null) {
				return false;
			}
		} else if (!left.equals(other.left)) {
			return false;
		}
		if (right == null) {
			if (other.right != null) {
				return false;
			}
		} else if (!right.equals(other.right)) {
			return false;
		}
		return true;
	}

	/**
	 * Comparable {@link Pair} implementation.
	 * 
	 * @author <a href="mailto:bakosg@tcd.ie">Gabor Bakos</a>
	 * 
	 * @param <Left>
	 *            The type of the first/left value.
	 * @param <Right>
	 *            The type of the second/right value.
	 */
	public static final class ComparablePair<Left extends Comparable<Left>, Right extends Comparable<Right>>
			extends Pair<Left, Right> implements
			Comparable<ComparablePair<Left, Right>> {
		private static final long serialVersionUID = 8726172643276141148L;

		/**
		 * Constructs a ComparablePair.
		 * 
		 * @param left
		 *            The left value.
		 * @param right
		 *            The right value.
		 */
		public ComparablePair(final Left left, final Right right) {
			super(left, right);
		}

		@Override
		public int compareTo(final ComparablePair<Left, Right> o) {
			final int compareTo = getLeft().compareTo(o.getLeft());
			if (compareTo != 0) {
				return compareTo;
			}
			return getRight().compareTo(o.getRight());
		}
	}
}
